{"version":3,"sources":["scripts/main.js"],"names":["tableBody","document","querySelector","tableHead","rows","sortTable","index","array","text","cells","innerText","sortedRow","sort","rowA","rowB","isNaN","Number","convertToNumber","localeCompare","append","string","slice","split","join","addEventListener","e","indexOf","target"],"mappings":";AAAA,aAkCC,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAhCD,IAAMA,EAAYC,SAASC,cAAc,SACnCC,EAAYF,SAASC,cAAc,SACnCE,EAAWJ,EAAAA,EAAUI,MAE3B,SAASC,EAAUC,EAAOC,GAClBC,IAAAA,EAAOJ,EAAK,GAAGK,MAAMH,GAAOI,UAE5BC,EAAYJ,EAAMK,KAAK,SAACC,EAAMC,GAC9B,OAACC,MAAMC,OAAOR,IAIF,MAAZA,EAAK,GACAS,EAAgBJ,EAAKJ,MAAMH,GAAOI,WACvCO,EAAgBH,EAAKL,MAAMH,GAAOI,WAG/BG,EAAKJ,MAAMH,GAAOI,UACtBQ,cAAcJ,EAAKL,MAAMH,GAAOI,WAT1BG,EAAKJ,MAAMH,GAAOI,UAAYI,EAAKL,MAAMH,GAAOI,YAY3DV,EAAUmB,OAAVnB,MAAAA,EAAoBW,EAAAA,IAStB,SAASM,EAAgBG,GAChB,OAACA,EAAOC,MAAM,GAAGC,MAAM,KAAKC,KAAK,IAP1CpB,EAAUqB,iBAAiB,QAAS,SAACC,GAGnCpB,EAFc,EAAIF,EAAUC,KAAK,GAAGK,OAAOiB,QAAQD,EAAEE,QAEpCvB","file":"main.f1b3538a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst tableBody = document.querySelector('tbody');\nconst tableHead = document.querySelector('thead');\nconst rows = [...tableBody.rows];\n\nfunction sortTable(index, array) {\n  const text = rows[0].cells[index].innerText;\n\n  const sortedRow = array.sort((rowA, rowB) => {\n    if (!isNaN(Number(text))) {\n      return rowA.cells[index].innerText - rowB.cells[index].innerText;\n    };\n\n    if (text[0] === '$') {\n      return convertToNumber(rowA.cells[index].innerText)\n      - convertToNumber(rowB.cells[index].innerText);\n    };\n\n    return rowA.cells[index].innerText\n      .localeCompare(rowB.cells[index].innerText);\n  });\n\n  tableBody.append(...sortedRow);\n}\n\ntableHead.addEventListener('click', (e) => {\n  const index = [...tableHead.rows[0].cells].indexOf(e.target);\n\n  sortTable(index, rows);\n});\n\nfunction convertToNumber(string) {\n  return +string.slice(1).split(',').join('');\n};\n"]}